---
- name: install | create storage path
  file: path={{ docker_registry_storage_path }} state=directory group=docker

- name: install | pull docker image
  command: docker pull {{  docker_registry_docker_image }}
  register: docker_pull_result
  changed_when: docker_pull_result.stdout.find('newer') > -1

- name: install | cat cidfile
  command: cat {{ docker_registry_cidfile }}
  ignore_errors: yes
  changed_when: False
  register: cat_result

- name: install | inspect container
  command: docker inspect {{ cat_result.stdout.strip() }}
  register: inspect_result
  changed_when: False
  when: >
    cat_result.rc > 0  or
    (inspect_result.rc == 0 and inspect_result.stdout.find('"Running": false') > -1)

- name: install | remove cidfile
  file: path={{ docker_registry_cidfile }} state=absent
  when: >
    cat_result.rc > 0  or
    (inspect_result.rc == 0 and inspect_result.stdout.find('"Running": false') > -1)

- name: install | run registry container
  shell: >
    rm -f {{ docker_registry_cidfile }} &&
    docker run -d -p {{ docker_registry_port }}:5000 \
    --cidfile {{ docker_registry_cidfile }} \
    -e SERVICE_NAME={{ docker_registry_service_name }} \
    -e SERVICE_CHECK_SCRIPT='/usr/bin/curl -sS -o /dev/null http://$(docker port $(cat {{ docker_registry_cidfile }}) 5000)/v1/_ping' \
    -e SERVICE_CHECK_INTERVAL=10s \
    -e SETTINGS_FLAVOR={{ docker_registry_settings_flavor }}  \
    -e LOGLEVEL={{ docker_registry_loglevel }} \
    -e SEARCH_BACKEND=sqlalchemy \
    -e STORAGE_PATH=/registry \
    -e AWS_BUCKET={{ docker_registry_s3_bucket }} \
    -e GUNICORN_WORKERS={{ docker_registry_gunicorn_workers }} \
    -v {{ docker_registry_storage_path }}:/registry \
    {{ docker_registry_docker_image }}
  when: >
    cat_result.rc > 0  or
    (inspect_result.rc == 0 and inspect_result.stdout.find('"Running": false') > -1)
  register: docker_run_result

# If the port is pinned, we need to get the port into the facts
- name: install | get container port
  shell: docker port $(cat {{ docker_registry_cidfile }})
  register: docker_port_result
  when: docker_registry_port == '' and docker_run_result.changed

- name: install | set new port fact
  set_fact: { docker_registry_port: "{{ docker_port_result.stdout.split(':')[1] }}" }
  when: docker_port_result is defined and docker_port_result.rc == 0

# If the port is not pinned we started another container and we should stop and remove
# the existing ones
- name: install | stop previous docker_registry container
  shell: docker {{ item }} {{ cat_result.stdout.strip() }}
  with_items: [stop, rm]
  when: docker_registry_port == '' and inspect_result is defined and inspect_result.rc == 0

- name: install | wait for server to come up
  wait_for: host=0.0.0.0 port={{ docker_registry_port }}
